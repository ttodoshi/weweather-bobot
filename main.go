package main

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"

	tg "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/google/uuid"
	"github.com/ttodoshi/weweather-bobot/pkg/env"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
func init() {
	env.LoadEnvVariables()
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞
var mainKeyboard = tg.NewReplyKeyboard(
	tg.NewKeyboardButtonRow(
		tg.NewKeyboardButton("–ü–æ–≥–æ–¥–∞"),
	),
	tg.NewKeyboardButtonRow(
		tg.NewKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥"),
	),
	tg.NewKeyboardButtonRow(
		tg.NewKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥"),
	),
)

type City struct {
	UUID   string `gorm:"primaryKey"`
	UserID int64  `gorm:"not null;index"`
	City   string `gorm:"not null"`
}

func (e *City) BeforeCreate(_ *gorm.DB) (err error) {
	e.UUID = uuid.NewString()
	return
}

func main() {
	// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	bot, err := tg.NewBotAPI(os.Getenv("TOKEN"))
	if err != nil {
		log.Panic(err)
	}
	db, err := gorm.Open(sqlite.Open("db.db"), &gorm.Config{})
	db.AutoMigrate(&City{})

	// –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–∫–æ–º–∞–Ω–¥) –æ—Ç –±–æ—Ç–∞
	u := tg.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	// –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–∫–æ–º–º–∞–Ω–¥)
	for update := range updates {
		// –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, —Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
		if update.Message == nil {
			continue
		}

		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
		msg := tg.NewMessage(update.Message.Chat.ID, "")

		// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π
		if update.Message.IsCommand() {
			switch update.Message.Command() {
			case "start":
				msg.ReplyMarkup = mainKeyboard
				msg.Text = "–ü—Ä–∏–≤–µ—Ç, –Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –ø–æ–≥–æ–¥—ã. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:"
			case "add":
				if city := strings.TrimSpace(update.Message.CommandArguments()); len(city) > 0 {
					msg.Text = "–î–æ–±–∞–≤–ª–µ–Ω –≥–æ—Ä–æ–¥ " + city
					db.Create(&City{
						UserID: update.Message.From.ID,
						City:   city,
					})
				} else {
					msg.Text = "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
				}
			case "delete":
				if city := strings.TrimSpace(update.Message.CommandArguments()); len(city) > 0 {
					msg.Text = "–£–¥–∞–ª–µ–Ω –≥–æ—Ä–æ–¥ " + city
					db.Delete(&City{}, "user_id = ? AND city = ?", update.Message.From.ID, city)
				} else {
					msg.Text = "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
				}
			default:
				msg.Text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
			}
		} else {
			// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π
			switch update.Message.Text {
			case "–ü–æ–≥–æ–¥–∞":
				msg.Text = "–ü–æ–≥–æ–¥–∞ –≤ –≤–∞—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö:\n"
				var cities []string
				db.
					Select("city").
					Where("user_id = ?", update.Message.From.ID).
					Table("cities").
					Find(&cities)
				msg.Text += fetchWeather(cities)
			case "–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥":
				msg.Text = "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /add <–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞>"
			case "–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥":
				msg.Text = "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /delete <–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞>"
			}
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		if _, err := bot.Send(msg); err != nil {
			log.Panic(err)
		}
	}
}

func fetchWeather(cities []string) (response string) {
	// url := "https://wttr.in/{" + strings.Join(cities, ",") + "}?m2&lang=ru&format=4"
	// url := "https://wttr.in/{" + strings.Join(cities, ",") + "}?format=4"
	client := &http.Client{}

	for _, city := range cities {
		// url := `https://wttr.in/` + city + `?format=%l:+%c+üå°Ô∏è+%t+%w\n`
		url := `https://wttr.in/` + city + `?format=4`
		req, err := http.NewRequest("GET", url, nil)
		if err != nil {
			fmt.Println(err)
			return
		}
		req.Header.Add("Accept-Language", "ru")

		resp, err := client.Do(req)
		if err != nil {
			fmt.Println(err)
			return
		}
		defer resp.Body.Close()

		body, err := io.ReadAll(resp.Body)
		if err != nil {
			fmt.Println(err)
			return
		}
		response += string(body)
	}

	return
}
